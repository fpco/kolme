-- Merkle hash storage
CREATE TABLE merkle_hashes(
    hash BLOB PRIMARY KEY NOT NULL,
    payload BLOB NOT NULL
);

CREATE TABLE blocks(
    height INTEGER PRIMARY KEY NOT NULL,
    blockhash BLOB NOT NULL UNIQUE,
    -- The fully signed block
    rendered TEXT NOT NULL,
    txhash BLOB NOT NULL UNIQUE,
    framework_state_hash BLOB NOT NULL,
    app_state_hash BLOB NOT NULL
);

CREATE TABLE messages(
    id INTEGER PRIMARY KEY NOT NULL,
    height INTEGER NOT NULL REFERENCES blocks(height),
    message INTEGER NOT NULL,
    UNIQUE(height, message)
);

CREATE TABLE logs(
    message INTEGER NOT NULL REFERENCES messages(id),
    position INTEGER NOT NULL,
    payload TEXT NOT NULL,
    PRIMARY KEY(message, position)
);

-- The events themselves, as reported by the first listener to observe.
CREATE TABLE bridge_events(
    -- Database-internal primary key
    id INTEGER PRIMARY KEY NOT NULL,
    chain TEXT NOT NULL,
    -- The monotonically increasing ID generated by the bridge contracts.
    event_id INTEGER NOT NULL,
    -- The actual event text from the chain.
    event TEXT NOT NULL,
    -- The message which accepted the event.
    accepted INTEGER NULL REFERENCES messages(id),
    UNIQUE(chain, event_id)
);

-- Attestations from individual listeners
CREATE TABLE bridge_event_attestations(
    event INTEGER NOT NULL REFERENCES bridge_events(id),
    public_key BLOB NOT NULL,
    message INTEGER NOT NULL UNIQUE REFERENCES messages(id),
    UNIQUE(event, public_key)
);
