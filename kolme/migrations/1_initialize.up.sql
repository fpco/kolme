CREATE TABLE accounts(
    id INTEGER PRIMARY KEY NOT NULL,    
    -- We'd like to have a reference here, but sqlite barfs on inserts if we do
    created INTEGER NOT NULL -- REFERENCES blocks(height)
);

CREATE TABLE account_wallets(
    account_id INTEGER NOT NULL REFERENCES accounts(id),
    wallet TEXT NOT NULL UNIQUE
);

CREATE TABLE account_pubkeys(
    account_id INTEGER NOT NULL REFERENCES accounts(id),
    pubkey BLOB NOT NULL UNIQUE
);

-- Unified table for looking up all hashes.
CREATE TABLE hashes(
    hash BLOB PRIMARY KEY NOT NULL,
    content TEXT NOT NULL
);

CREATE TABLE blocks(
    height INTEGER PRIMARY KEY NOT NULL,
    blockhash BLOB NOT NULL UNIQUE,
    -- The fully signed block
    rendered TEXT NOT NULL,
    txhash BLOB NOT NULL UNIQUE,
    framework_state_hash BLOB NOT NULL,
    app_state_hash BLOB NOT NULL,
    -- Account ID of the transaction proposing
    account_id INTEGER NOT NULL REFERENCES accounts(id),
    -- The nonce used for this transaction
    nonce INTEGER NOT NULL,
    UNIQUE(account_id, nonce)
);

CREATE TABLE messages(
    id INTEGER PRIMARY KEY NOT NULL,
    height INTEGER NOT NULL REFERENCES blocks(height),
    message INTEGER NOT NULL,
    UNIQUE(height, message)
);

CREATE TABLE logs(
    message INTEGER NOT NULL REFERENCES messages(id),
    position INTEGER NOT NULL,
    payload TEXT NOT NULL,
    PRIMARY KEY(message, position)
);

CREATE TABLE loads(
    message INTEGER NOT NULL REFERENCES messages(id),
    position INTEGER NOT NULL,
    payload TEXT NOT NULL,
    PRIMARY KEY(message, position)
);

CREATE TABLE actions(
    -- Database-internal primary key
    id INTEGER PRIMARY KEY NOT NULL,
    chain TEXT NOT NULL,
    -- The monotonically increasing ID sent to the bridge contracts.
    action_id INTEGER NOT NULL,
    message INTEGER NOT NULL REFERENCES messages(id),
    position INTEGER NOT NULL,
    payload TEXT NOT NULL,
    -- The message sent by the processor indicating all approvals are met
    approved INTEGER NULL REFERENCES messages(id),
    -- The message which confirms that the action occurred
    confirmed INTEGER NULL REFERENCES messages(id),
    UNIQUE(chain, action_id),
    UNIQUE(message, position)
);

-- The events themselves, as reported by the first listener to observe.
CREATE TABLE bridge_events(
    -- Database-internal primary key
    id INTEGER PRIMARY KEY NOT NULL,
    chain TEXT NOT NULL,
    -- The monotonically increasing ID generated by the bridge contracts.
    event_id INTEGER NOT NULL,
    -- The actual event text from the chain.
    event TEXT NOT NULL,
    -- The message which accepted the event.
    accepted INTEGER NULL REFERENCES messages(id),
    UNIQUE(chain, event_id)
);

-- Attestations from individual listeners
CREATE TABLE bridge_event_attestations(
    event INTEGER NOT NULL REFERENCES bridge_events(id),
    public_key BLOB NOT NULL,
    message INTEGER NOT NULL UNIQUE REFERENCES messages(id),
    UNIQUE(event, public_key)
);

-- Approvals from approvers for actions.
CREATE TABLE action_approvals(
    action INTEGER NOT NULL REFERENCES actions(id),
    public_key BLOB NOT NULL,
    signature BLOB NOT NULL UNIQUE,
    recovery INTEGER NOT NULL,
    message INTEGER NOT NULL UNIQUE REFERENCES messages(id),
    UNIQUE(action, public_key)
);
