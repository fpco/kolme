name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: 1
  RUSTUP_MAX_RETRIES: 10

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install depdendencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libudev-dev libusb-1.0-0-dev libhidapi-dev mold
      - uses: taiki-e/install-action@v2
        with:
          tool: just@1.40.0,nextest@0.9.99,sqlx-cli
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.84.0
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          cache-workspace-crates: true
          cache-on-failure: true
          workspaces: |
            .
      - uses: step-security/changed-files@v46
        id: contracts
        with:
          files: |
            contracts:
              - contracts/**
              - .ci/**
      - name: Cache contract builds
        uses: actions/cache@v4
        id: contract-cache
        with:
          key: contracts-c1-${{ hashFiles('contracts/cosmos/Cargo.toml') }}-${{ hashFiles('./.ci/build-contracts.sh')}} }
          restore-keys: |
            contracts-${{ hashFiles('contracts/cosmos/Cargo.toml') }}
            contracts
          path: |
            wasm
      - name: Cache docker images
        run: just cache-docker-images
      - name: Compile
        run: just cargo-compile
      - name: Build contracts
        if: ${{ (steps.contract-cache.outputs.cache-hit == false || steps.contracts.outputs.any_changed == 'true') }}
        run: just build-contracts
      - name: Postgres
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:45921/postgres?sslmode=disable
        run: just postgres
      - name: Run tests
        env:
          PROCESSOR_BLOCK_DB: psql://postgres:postgres@localhost:45921/postgres
        run: just cargo-test
      - name: Slow tests
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          PROCESSOR_BLOCK_DB: psql://postgres:postgres@localhost:45921/postgres
        run: just cargo-slow-tests
      - name: Start localosmosis
        run: just localosmosis
      - name: Contract tests
        run: just cargo-contract-tests

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6
      - name: Configure sccache GHA
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('SCCACHE_GHA_ENABLED', 'on');
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: lint-${{ runner.os }}
      - name: Setup system
        uses: ./.github/actions/setup-system
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-prefix-key: lint
      - name: Run lint checks
        env:
          RUSTC_WRAPPER: sccache
        run: |
          just fmt
          just clippy
      - name: Install cargo-machete
        uses: clechasseur/rs-cargo@8435b10f6e71c2e3d4d3b7573003a8ce4bfc6386 # v2.0.6
        with:
          command: install
          args: cargo-machete@0.7.0
      - name: Machete
        uses: clechasseur/rs-cargo@8435b10f6e71c2e3d4d3b7573003a8ce4bfc6386 # v2.0.6
        with:
          command: machete
      - name: Install cargo-audit
        uses: clechasseur/rs-cargo@8435b10f6e71c2e3d4d3b7573003a8ce4bfc6386 # v2.0.6
        with:
          command: install
          args: cargo-audit@0.21.1 --locked
      - name: Cargo audit
        uses: rustsec/audit-check@dd51754d4e59da7395a4cd9b593f0ff2d61a9b95
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # RUSTSEC-2023-0071: timing attack looks to be inapplicable
          # Taken from the six-sigma-v2 repository.
          ignore: "RUSTSEC-2023-0071,RUSTSEC-2025-0009,RUSTSEC-2022-0093,RUSTSEC-2024-0344"
      - name: Show sccache stats
        run: sccache --show-stats

  solana-contract:
    name: Build & Test Solana Contract
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6
      - name: Configure sccache GHA
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('SCCACHE_GHA_ENABLED', 'on');
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: solana-${{ runner.os }}
      - name: Setup just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2
      - name: Setup system
        uses: ./.github/actions/setup-system
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-prefix-key: solana
      - name: Install Solana tools
        run: |
          curl --proto '=https' --tlsv1.2 -sSfL https://solana-install.solana.workers.dev | bash
          sh -c "$(curl -sSfL https://release.anza.xyz/stable/install)"
          echo "/home/runner/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
      - name: Test Solana contract
        working-directory: solana
        env:
          RUSTC_WRAPPER: sccache
        run: just test
      - name: Show sccache stats
        run: sccache --show-stats
